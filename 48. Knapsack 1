48. Knapsack 1 
#include <stdio.h>

int max(int a, int b) {
  return (a > b) ? a : b;
}

int knapsack(int W, int wt[], int val[], int n) {
  int K[n + 1][W + 1]; // Create a table to store optimal values

  // Build table K[][] in bottom-up manner
  for (int i = 0; i <= n; i++) {
    for (int w = 0; w <= W; w++) {
      if (i == 0 || w == 0) {
        K[i][w] = 0; // Base cases: No items or no capacity
      } else if (wt[i - 1] <= w) {
        K[i][w] = max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w]);
        // Choose between including or excluding the item
      } else {
        K[i][w] = K[i - 1][w]; // If weight is too high, exclude the item
      }
    }
  }

  return K[n][W]; // Maximum value attainable with capacity W
}

int main() {
  int val[] = {60, 100, 120};
  int wt[] = {10, 20, 30};
  int W = 50;
  int n = sizeof(val) / sizeof(val[0]);

  printf("Maximum value that can be put in a knapsack of capacity %d is %d\n", W, knapsack(W, wt, val, n));

  return 0;
} 

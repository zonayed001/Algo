#include <stdio.h>
#include <stdlib.h>
Age sort
#define MAX_SIZE 100005 // Define a maximum size for the array

// Function to merge two sorted subarrays
void merge(int arr[], int low, int mid, int high) {
    int n1 = mid - low + 1;
    int n2 = high - mid;

    // Create temporary arrays
    int left[n1], right[n2];
    for (int i = 0; i < n1; i++) {
        left[i] = arr[low + i];
    }
    for (int j = 0; j < n2; j++) {
        right[j] = arr[mid + 1 + j];
    }

    // Merge the temporary arrays back into arr[]
    int i = 0, j = 0, k = low;
    while (i < n1 && j < n2) {
        if (left[i] <= right[j]) {
            arr[k] = left[i];
            i++;
        } else {
            arr[k] = right[j];
            j++;
        }
        k++;
    }

    // Copy the remaining elements (if any)
    while (i < n1) {
        arr[k] = left[i];
        i++;
        k++;
    }
    while (j < n2) {
        arr[k] = right[j];
        j++;
        k++;
    }
}

// Recursive Merge Sort function
void mergeSort(int arr[], int low, int high) {
    if (low < high) {
        int mid = low + (high - low) / 2;
        mergeSort(arr, low, mid);
        mergeSort(arr, mid + 1, high);
        merge(arr, low, mid, high);
    }
}

int main() {
    int n, i;

    printf("Enter the number of ages (positive integer): ");
    if (scanf("%d", &n) != 1 || n <= 0) {
        fprintf(stderr, "Invalid input. Please enter a positive integer.\n");
        return 1;
    }

    int ages[MAX_SIZE];

    printf("Enter %d ages:\n", n);
    for (i = 0; i < n; i++) {
        scanf("%d", &ages[i]);
    }

    mergeSort(ages, 0, n - 1); // Sort ages from index 0 to n-1

    printf("Sorted ages:\n");
    for (i = 0; i < n; i++) {
        printf("%d ", ages[i]);
    }
    printf("\n");

    return 0;
} 

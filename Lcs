LCS 
#include <stdio.h>
#include <string.h>

int max(int a, int b) {
  return (a > b) ? a : b;
}

int lcs(const char *str1, const char *str2, int m, int n) {
  int L[m + 1][n + 1]; // Create a table to store lengths of LCS

  // Build table in bottom-up manner
  for (int i = 0; i <= m; i++) {
    for (int j = 0; j <= n; j++) {
      if (i == 0 || j == 0) {
        L[i][j] = 0; // Base cases: Empty strings have LCS of 0
      } else if (str1[i - 1] == str2[j - 1]) {
        L[i][j] = L[i - 1][j - 1] + 1; // If characters match, add 1 to LCS length
      } else {
        L[i][j] = max(L[i - 1][j], L[i][j - 1]); // Choose the maximum LCS length from excluding either character
      }
    }
  }

  // Return the length of LCS
  return L[m][n];
}

int main() {
  char str1[100], str2[100];

  printf("Enter first string: ");
  fgets(str1, 100, stdin); // Read entire line including newline

  // Remove trailing newline from str1 (optional)
  str1[strcspn(str1, "\n")] = '\0';

  printf("Enter second string: ");
  fgets(str2, 100, stdin);  // Read entire line including newline

  // Remove trailing newline from str2 (optional)
  str2[strcspn(str2, "\n")] = '\0';

  int m = strlen(str1); // Get length of str1 (excluding null terminator)
  int n = strlen(str2); // Get length of str2 (excluding null terminator)

  int lcs_length = lcs(str1, str2, m, n);

  printf("Length of Longest Common Subsequence: %d\n", lcs_length);

  return 0;
} 

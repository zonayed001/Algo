Minimum The

permutation 
#include <stdio.h>
#include <stdbool.h>

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void minPermutation(int arr[], int n) {
    // Mark all elements as not visited
    bool visited[n];
    for (int i = 0; i < n; i++) {
        visited[i] = false;
    }

    // Find the minimum element and its index for each position
    for (int i = 0; i < n; i++) {
        int min = arr[i], minIndex = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < min) {
                min = arr[j];
                minIndex = j;
            }
        }

        // If the element at the current position is not already visited
        // and it's smaller than the element at its desired position, swap them
        if (!visited[minIndex] && arr[i] > min) {
            swap(&arr[i], &arr[minIndex]);
            visited[minIndex] = true; // Mark the swapped element as visited
        }
    }
}

int main() {
    int n, i;

    printf("Enter the number of elements (positive integer with distinct values): ");
    if (scanf("%d", &n) != 1 || n <= 0) {
        fprintf(stderr, "Invalid input. Please enter a positive integer.\n");
        return 1;
    }

    int arr[n];

    printf("Enter %d distinct integers:\n", n);
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    minPermutation(arr, n);

    printf("Minimum permutation:\n");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
} 

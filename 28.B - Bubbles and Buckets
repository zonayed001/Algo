#include <stdio.h>
#include <stdlib.h>

#define MAX_N 500005

long long count; // Global variable to store inversion count

// Function to merge two sorted subarrays
void merge(int arr[], int len, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    // Create temporary arrays
    int left_arr[n1], right_arr[n2];
    for (int i = 0; i < n1; i++) {
        left_arr[i] = arr[left + i];
    }
    for (int j = 0; j < n2; j++) {
        right_arr[j] = arr[mid + 1 + j];
    }

    // Merge the temporary arrays back into arr[]
    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (left_arr[i] <= right_arr[j]) {
            arr[k] = left_arr[i];
            i++;
        } else {
            arr[k] = right_arr[j];
            j++;
            count += n1 - i; // Increment count for inversions
        }
        k++;
    }

    // Copy the remaining elements (if any)
    while (i < n1) {
        arr[k] = left_arr[i];
        i++;
        k++;
    }
    while (j < n2) {
        arr[k] = right_arr[j];
        j++;
        k++;
    }
}

// Recursive Merge Sort function
void mergeSort(int arr[], int len, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, len, left, mid);
        mergeSort(arr, len, mid + 1, right);\\28.B - Bubbles and Buckets
        merge(arr, len, left, mid, right);
    }
}

int main() {
    int N;

    while (scanf("%d", &N) == 1 && N) {
        for (int i = 0; i < N; i++) {
            scanf("%d", &array1[i]);
        }

        count = 0; // Reset count for each test case
        mergeSort(array1, N, 0, N - 1);

        printf("%s\n", (count % 2) ? "Marcelo" : "Carlos");
    }

    return 0;
}

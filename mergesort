#include <stdio.h>
#include <limits.h> // For INT_MAX

#define MAX_SIZE 100005 // Define a maximum size for the array

long long int cnt;
int a[MAX_SIZE], L[MAX_SIZE / 2 + 5], R[MAX_SIZE / 2 + 5];

// Function to merge two sorted subarrays
void merge(int p, int q, int r) {
    int n1 = q - p + 1;
    int n2 = r - q;

    // Copy data to temporary arrays
    for (int i = 0; i < n1; i++) {
        L[i] = a[p + i];
    }
    for (int j = 0; j < n2; j++) {
        R[j] = a[q + 1 + j];
    }

    // Set sentinels (largest possible values)
    L[n1] = INT_MAX;
    R[n2] = INT_MAX;

    int i = 0, j = 0, k = p;
    while (k <= r) {
        if (L[i] <= R[j]) {
            a[k] = L[i];
            i++;
        } else {
            cnt += n1 - i; // Increment count for inversions
            a[k] = R[j];
            j++;
        }
        k++;
    }
}

// Recursive Merge Sort function
void mergesort(int p, int r) {
    if (p < r) {
        int q = (p + r) / 2;
        mergesort(p, q);
        mergesort(q + 1, r);
        merge(p, q, r);
    }
}

int main() {
    int n, i;

    while (scanf("%d", &n) && n) {
        for (i = 0; i < n; i++) {
            scanf("%d", &a[i]);
        }

        cnt = 0; // Reset count for each test case
        mergesort(0, n - 1); // Use 0 and n-1 for array indexing

        printf("%lld\n", cnt);
    }

    return 0;
}
